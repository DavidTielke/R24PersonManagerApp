<?xml version="1.0" encoding="utf-8"?>
<Queries>
  <Group Name="SRP" Active="True" ShownInReport="False">
    <Query Active="True" DisplayList="True" DisplayStat="False" DisplaySelectionView="False" IsCriticalRule="False"><![CDATA[// <Name>Keine Klasse verletzt SRP</Name>
warnif count > 0 
from t in JustMyCode.Types

let trueMethods = t.Methods.Where(m => !m.IsGeneratedByCompiler && !m.IsPropertyGetter && !m.IsPropertySetter && !m.IsConstructor)

where !t.IsGeneratedByCompiler
 && (t.NbLinesOfCode > 2 || trueMethods.Count() > 2) // LOC: 220 | Methods: 8
select new{t, t.NbLinesOfCode, trueMethods, Severity = Severity.Blocker}
]]></Query>
    <Query Active="True" DisplayList="True" DisplayStat="False" DisplaySelectionView="False" IsCriticalRule="False"><![CDATA[// <Name>Keine Methode verletzt SRP</Name>
warnif count > 0 
let trueMethods = JustMyCode.Methods.Where(m => !m.IsPropertyGetter && !m.IsPropertySetter && !m.IsGeneratedByCompiler
   && (m.NbLinesOfCode > 2 || m.CyclomaticComplexity > 2))

from m in trueMethods

select new { m, m.NbLinesOfCode, m.CyclomaticComplexity }]]></Query>
  </Group>
  <Group Name="Namensmuster" Active="True" ShownInReport="False">
    <Query Active="True" DisplayList="True" DisplayStat="False" DisplaySelectionView="False" IsCriticalRule="False"><![CDATA[// <Name>Namensmuster Manager wird eingehalten</Name>
warnif count > 0
 
let namePattern = "Manager"
let allowedMethods = new []{"Add","Update","Remove"}
let allowedPrefixes = new[]{"Get","Is","Are"}
 
 
let managementClasses = JustMyCode.Types.Where(t => !t.ParentNamespace.NameLike("DataClasses") && !t.IsGeneratedByCompiler)
 
from t in managementClasses.Where(t1 => t1.Name.EndsWith(namePattern))
 
let trueMethods = t.Methods.Where(m => !m.IsGeneratedByCompiler && !m.IsPropertyGetter && !m.IsPropertySetter && !m.IsConstructor)
 
let forbiddenMethods = trueMethods.Where(m => !allowedMethods.Any(m1 => m.SimpleName == m1) 
&& allowedPrefixes.All(mp => !m.SimpleName.StartsWith(mp)))
where forbiddenMethods.Any()
 
select new { t, forbiddenMethods }]]></Query>
    <Query Active="True" DisplayList="True" DisplayStat="False" DisplaySelectionView="False" IsCriticalRule="False"><![CDATA[// <Name>Klassen ohne Namensmuster</Name>
warnif count > 0 

let classBlacklist = new string[]{"Program"}
let namePatterns = new string[]
{
   "Manager",
   "Repository",
   "Parser",
   "Storer",
   "Reader",
   "Commands"
}

let managementClasses = JustMyCode.Types.Where(t => !t.ParentNamespace.NameLike("DataClasses") 
                                                    && !classBlacklist.Contains(t.SimpleName) 
                                                    && !t.IsGeneratedByCompiler)

from t in managementClasses

where !namePatterns.Any(np => t.SimpleName.EndsWith(np))

select new { t, t.Methods }]]></Query>
  </Group>
</Queries>